---
import { transactions, accounts } from "../../../models/schema";
import { db } from "../../../utils/db";
import { sum, eq } from "drizzle-orm";
import type { ApexOptions } from "apexcharts";
import BaseChart from "../../charts/BaseChart.astro";

async function aggregatePaymentsByAccount() {
  const paymentSums = await db
    .select({
      accountId: transactions.accountId,
      totalPayments: sum(transactions.amount),
    })
    .from(transactions)
    .where(eq(transactions.type, "debt-payment")) // Filter for transactions of type 'debt-payment'
    .groupBy(transactions.accountId)
    .execute();

  return paymentSums; // Returns [{ accountId: 1, totalPayments: 600 }, ...]
}

// Fetch account records and include the aggregated payments
const accountRecords = await db
  .select({
    id: accounts.id,
    name: accounts.name,
    balance: accounts.balance, // Starting balance
  })
  .from(accounts)
  .execute();

const paymentsByAccount = await aggregatePaymentsByAccount();

// Combine account details with their respective total payments
const combinedData = accountRecords.map(account => {
  const paymentInfo = paymentsByAccount.find(p => p.accountId === account.id) || { totalPayments: 0 };
  return {
    name: account.name,
    startingBalance: account.balance,
    totalPayments: paymentInfo.totalPayments,
  };
});

// Prepare the series data for the stacked chart
const seriesDataStartingBalance = combinedData.map(account => ({
  x: account.name,
  y: account.startingBalance
}));

const seriesDataDebtPayments = combinedData.map(account => ({
  x: account.name,
  y: account.totalPayments
}));

// Chart options setup for stacked bar chart
const chartOptions: ApexOptions = {
  series: [{
    name: "Starting Balance",
    data: seriesDataStartingBalance,
    type: 'column'
  }, {
    name: "Debt Payments",
    data: seriesDataDebtPayments,
    type: 'column'
  }],
  chart: {
    height: 350,
    type: "bar",
    stacked: true, // Enable stacked bars
  },
  plotOptions: {
    bar: {
      horizontal: false, // Set to true if you prefer horizontal bars
      columnWidth: '60%',
    }
  },
  colors: ['#1f77b4', '#ff7f0e'], // Brighter colors for better contrast
  dataLabels: {
    enabled: false,
  },
  xaxis: {
    type: 'category',
    labels: {
      style: {
        colors: '#ffffff', // White labels for dark background
      },
    },
  },
  yaxis: {
    title: {
      text: 'Amount ($)',
      style: {
        color: '#ffffff', // White title for dark background
      },
    },
    labels: {
      style: {
        colors: '#ffffff', // White labels for dark background
      },
    },
  },
  tooltip: {
    theme: 'dark', // Dark theme for tooltip
    y: {
      formatter: function(val) {
        return "$" + val.toFixed(2);
      }
    }
  },
  legend: {
    show: true,
    labels: {
      colors: '#ffffff', // White legend labels for dark background
    },
  },
};

---
<BaseChart options={chartOptions} />
