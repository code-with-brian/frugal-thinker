---
import { transactions, accounts } from "../../../models/schema";
import { db } from "../../../utils/db";
import { sum, eq } from "drizzle-orm";
import type { ApexOptions } from "apexcharts";
import BaseChart from "../../charts/BaseChart.astro";

// Aggregate payments by account
async function aggregatePaymentsByAccount() {
  return await db
    .select({
      accountId: transactions.accountId,
      totalPayments: sum(transactions.amount),
    })
    .from(transactions)
    .where(eq(transactions.type, "debt-payment"))
    .groupBy(transactions.accountId)
    .execute();
}

// Fetch account records
async function fetchAccountRecords() {
  return await db
    .select({
      id: accounts.id,
      name: accounts.name,
      balance: accounts.balance,
    })
    .from(accounts)
    .execute();
}

const accountRecords = await fetchAccountRecords();
const paymentsByAccount = await aggregatePaymentsByAccount();

// Combine data for chart
const combinedData = accountRecords.map(account => {
  const paymentInfo = paymentsByAccount.find(p => p.accountId === account.id) || { totalPayments: 0 };
  return {
    name: account.name,
    startingBalance: account.balance,
    totalPayments: paymentInfo.totalPayments,
  };
});

const seriesDataStartingBalance = combinedData.map(account => ({
  x: account.name,
  y: account.startingBalance
}));

const seriesDataDebtPayments = combinedData.map(account => ({
  x: account.name,
  y: account.totalPayments
}));

// Chart options
const chartOptions: ApexOptions = {
  series: [{
    name: "Starting Balance",
    data: seriesDataStartingBalance,
    type: 'column'
  }, {
    name: "Debt Payments",
    data: seriesDataDebtPayments,
    type: 'column'
  }],
  chart: {
    height: 350,
    type: "bar",
    stacked: true,
    toolbar: {
      show: false
    },
    background: '#1f2937',
  },
  plotOptions: {
    bar: {
      horizontal: false,
      columnWidth: '60%',
      dataLabels: {
        position: 'top',
      },
    }
  },
  colors: ['#1f77b4', '#ff7f0e'],
  dataLabels: {
    enabled: false,
  },
  xaxis: {
    type: 'category',
    labels: {
      style: {
        colors: '#ffffff',
      },
    },
  },
  yaxis: {
    title: {
      text: 'Amount ($)',
      style: {
        color: '#ffffff',
      },
    },
    labels: {
      style: {
        colors: '#ffffff',
      },
    },
  },
  tooltip: {
    theme: 'dark',
    y: {
      formatter: function(val) {
        return "$" + val.toFixed(2);
      }
    }
  },
  legend: {
    show: true,
    labels: {
      colors: '#ffffff',
    },
  },
  grid: {
    padding: {
      left: 20,
      right: 20,
      top: 10,
      bottom: 10
    }
  }
};
---

<div class="chart-container">
  <BaseChart options={chartOptions} />
</div>

<style>
  .chart-container {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 100%;
    padding: 20px;
    background: #1f2937;
    border-radius: 10px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    margin: 20px 0;
  }

  .chart-container > div {
    width: 100%;
    height: 100%;
  }

  .apexcharts-canvas {
    width: 100% !important;
  }
</style>
